generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid())
  fullName       String
  email          String          @unique
  password       String
  avatarUrl      String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  active         Boolean         @default(true)
  forgotPassword ForgotPassword?
  roles          Role[]          @relation("roles_on_users")

  @@index([email])
  @@index([fullName])
  @@map("users")
}

model ForgotPassword {
  id        String   @id @default(uuid())
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])

  @@index([code])
  @@map("forgot_passwords")
}

model Role {
  id          String       @id @default(uuid())
  name        String       @unique
  description String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  active      Boolean      @default(true)
  permissions Permission[] @relation("permissions_on_roles")
  users       User[]       @relation("roles_on_users")

  @@map("roles")
}

model Permission {
  id          String   @id @default(uuid())
  identifier  String   @unique
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  active      Boolean  @default(true)
  roles       Role[]   @relation("permissions_on_roles")

  @@map("permissions")
}

enum AnimeStatus {
  FINISHED
  RELEASING
  TO_RELEASE
  HIATUS
}

model Anime {
  id            String      @id @default(uuid())
  imageUrl      String
  backgroundUrl String?
  name          String      @unique
  synopsis      String
  status        AnimeStatus
  weekday       Int
  startDate     DateTime?
  finishDate    DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  active        Boolean     @default(true)
  seasons       Season[]    @relation("seasons_on_animes")

  @@index([name])
  @@map("animes")
}

enum SeasonName {
  SPRING
  SUMMER
  FALL
  WINTER
}

model Season {
  id        String     @id @default(uuid())
  name      SeasonName
  year      Int
  show      Boolean    @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  active    Boolean    @default(true)
  animes    Anime[]    @relation("seasons_on_animes")

  @@unique([name, year])
  @@map("seasons")
}
